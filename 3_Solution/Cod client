#define WIN32_LEAN_AND_MEAN
#define _CRT_SECURE_NO_WARNINGS

#include<iostream>
using namespace std;

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>


// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")


#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"

SOCKET initialiseConnection(int argc, char** argv)
{
    WSADATA wsaData;
    SOCKET ConnectSocket = INVALID_SOCKET;
    struct addrinfo* result = NULL, * ptr = NULL, hints;
    int iResult;
    

    // Validate the parameters
    if (argc != 2) {
        printf("usage: %s server-name\n", argv[0]);
        exit(1);
    }

    // Initialize Winsock
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        printf("WSAStartup failed with error: %d\n", iResult);
        exit(1);
    }

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // Resolve the server address and port
    iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
    if (iResult != 0) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        exit(1);
    }

    // Attempt to connect to an address until one succeeds
    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {

        // Create a SOCKET for connecting to server
        ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);

        if (ConnectSocket == INVALID_SOCKET) {
            printf("socket failed with error: %ld\n", WSAGetLastError());
            WSACleanup();
            exit(1);
        }

        // Connect to server.
        iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            closesocket(ConnectSocket);
            ConnectSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }

    freeaddrinfo(result);

    if (ConnectSocket == INVALID_SOCKET) {
        printf("Unable to connect to server!\n");
        WSACleanup();
        exit(1);
    }

    return ConnectSocket;
}
void createUser(SOCKET *ConnectSocket)
{
    cout << "Insert new username:";
    string username;
    cin >> username;
    send(*ConnectSocket, username.c_str(), DEFAULT_BUFLEN, 0);
    cout << "Insert new password:";
    string password;
    cin >> password;
    send(*ConnectSocket, password.c_str(), DEFAULT_BUFLEN, 0);
    cout << "Insert new type of user:";
    string type;
    cin >> type;
    send(*ConnectSocket, type.c_str(), DEFAULT_BUFLEN, 0);

    string grupa;
    if (type == "student")
    {
        cout << "Insert group for student:";
        cin >> grupa;
    }
    else
        grupa = "NULL";
    send(*ConnectSocket, grupa.c_str(), DEFAULT_BUFLEN, 0);
}
void deleteUser(SOCKET *ConnectSocket)
{
    string user;
    cout << "User to delete (insert username):";
    cin >> user;
    send(*ConnectSocket, user.c_str(), DEFAULT_BUFLEN, 0);
}
void createHomework(SOCKET* ConnectSocket)
{
    string grupa;
    cout << "Introduceti grupa:";
    cin >> grupa;
    send(*ConnectSocket, grupa.c_str(), DEFAULT_BUFLEN, 0);

    string termenLimita;
    cout << "Introduceti termenul limita:";
    cin >> termenLimita;
    send(*ConnectSocket, termenLimita.c_str(), DEFAULT_BUFLEN, 0);
}

int __cdecl main(int argc, char** argv)
{
    printf("CLIENT\n\n\n");
    
    SOCKET ConnectSocket = INVALID_SOCKET;
    ConnectSocket = initialiseConnection(argc,argv);

    int iResult = 0;
    
    char serverResponse[DEFAULT_BUFLEN];
    string username;
    string password;

againLogin:

    cout << "Username:";
    cin >> username;
    send(ConnectSocket, username.c_str(), (int)strlen(username.c_str()) + 1, 0);

    cout << "Password:";
    cin >> password;
    send(ConnectSocket, password.c_str(), (int)strlen(password.c_str()) + 1, 0);

    
    recv(ConnectSocket, serverResponse, DEFAULT_BUFLEN, 0);

    if (strcmp(serverResponse, "studentLogin") == 0)
    {
        //to be continued
        cout << "Welcome, student!" << endl;

        char command[DEFAULT_BUFLEN];
        do
        {
            cout << "Comanda:";
            cin >> command;

            send(ConnectSocket, command, DEFAULT_BUFLEN, 0);

        } while (strcmp(command, "quit") != 0);
    }
    if (strcmp(serverResponse, "profesorLogin") == 0)
    {
        //to be continued
        cout << "Welcome, profesor!" << endl;

        char command[DEFAULT_BUFLEN];
        do
        {
            cout << "Comanda:";
            cin >> command;

            send(ConnectSocket, command, DEFAULT_BUFLEN, 0);

            if (strcmp(command, "create") == 0)
                createHomework(&ConnectSocket);

        } while (strcmp(command, "quit") != 0);
    }
    if (strcmp(serverResponse, "adminLogin") == 0)
    {
        cout << "Welcome, admin!" << endl;

        char command[DEFAULT_BUFLEN];
        do
        {
            cout << "Comanda:";
            cin >> command;

            send(ConnectSocket, command, DEFAULT_BUFLEN, 0);

            if (strcmp(command, "create") == 0)
                createUser(&ConnectSocket);
           
            if (strcmp(command, "delete") == 0)
                deleteUser(&ConnectSocket);
            
        } while (strcmp(command, "quit") != 0);

    }
    if (strcmp(serverResponse, "incorrectPassword") == 0)
    {
        cout << "Incorrect password! Try again..." << endl;
        goto againLogin;
    }
    if (strcmp(serverResponse, "userNotFound") == 0)
    {
        cout << "User not into database. Contact admin, then try again..." << endl;
        goto againLogin;
    }

    closesocket(ConnectSocket); //aici imi inchide socketul
    WSACleanup();

    return 0;
}
